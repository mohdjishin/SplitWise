// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Logs in a user with email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully, returns token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user with email, password, and name. Returns conflict error if email already exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": " Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/groups/member-groups": {
            "get": {
                "description": "Retrieves all groups associated with the authenticated user. Optionally filters the results by group status. If no status is provided, all groups will be returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "List groups the user belongs to",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The status of the groups to filter by. Valid values are 'PENDING' or 'DONE'",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with the list of groups.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ListMemberGroupsResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status parameter provided.",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/v1/groups/report": {
            "post": {
                "description": "Generates and downloads a PDF report for the groups created by the user within a specified date range.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Download PDF report of user's groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "from date in the format YYYY-MM-DD",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "to date in the format YYYY-MM-DD",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "description": "GetGroupReportRequest details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetGroupReportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PDF report generated and downloaded",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.GetGroupReportRequest": {
            "description": "Request model for generating a group report based on date range.",
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "dto.ListMemberGroupsResponse": {
            "description": "Response model for listing groups the user belongs to, including group details and member information.",
            "type": "object",
            "properties": {
                "group": {
                    "$ref": "#/definitions/models.Group"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GroupMember"
                    }
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jis@jish.com"
                },
                "password": {
                    "type": "string",
                    "example": "Passw0rd@123"
                }
            }
        },
        "dto.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "errors.Error": {
            "description": "Error model for handling errors.",
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Bill": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Total amount",
                    "type": "number"
                },
                "completed": {
                    "description": "Overall bill payment status",
                    "type": "boolean"
                },
                "groupId": {
                    "description": "Reference to the associated group",
                    "type": "integer"
                },
                "history": {
                    "description": "Bill payment history",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BillHistory"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.BillHistory": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount related to this history entry",
                    "type": "number"
                },
                "billId": {
                    "description": "Automatically inferred foreign key",
                    "type": "integer"
                },
                "createdAt": {
                    "description": "Auto-create timestamp",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "paidAt": {
                    "description": "Time of payment",
                    "type": "string"
                },
                "paidBy": {
                    "description": "User who made the payment",
                    "type": "string"
                }
            }
        },
        "models.Group": {
            "type": "object",
            "properties": {
                "bill": {
                    "$ref": "#/definitions/models.Bill"
                },
                "billId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "paidAmount": {
                    "type": "number"
                },
                "perUserSplitAmount": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "totalAmount": {
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.GroupMember": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "groupId": {
                    "type": "integer"
                },
                "hasPaid": {
                    "description": "Tracks if the member has paid",
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "remarks": {
                    "type": "string"
                },
                "splitAmount": {
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "SplitWise API",
	Description:      "This is an API for managing splits.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
